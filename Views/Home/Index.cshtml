@model MahJongBPS.Models.PurchaseModel
@{
    ViewData["Title"] = "購買時數";
}
<!DOCTYPE html>
<html lang="en">
<head>

    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/bulma/css/bulma.min.css">
    <link rel="stylesheet" href="~/css/index.css">
    <script src="~/js/signalr.min.js"></script>

    <title>麻將開台</title>
    <style>
        body {
            overflow-y: scroll; /* 允許滾動 */
        }

            body::-webkit-scrollbar {
                width: 0em; /* 谷歌和Safari的寬度 */
                position:revert-layer;
            }

                
            body::-webkit-scrollbar-thumb {
                background-color: #888; /* 滾動條的顏色 */
            }
           
        .button-container{
            display: flex;
            justify-content: space-evenly;
            flex-wrap: wrap;
            align-content: space-around;
            margin-top: 100px;
            margin-bottom: 100px;
        }

        
        /* 將互動視窗內容置中 */
        .modal-card-body {
            display: flex;
            flex-direction: column;
        }

        .control {
            display: flex;
            flex-wrap: wrap;
            flex-direction: column;
            margin-left: 35px;
        }
        .label-radio{
            display: flex;
            align-items: center;
            margin-bottom: 10px;
            
        }

        .form-check-input {
            width: 2em;
            height: 2em;
        }
            .form-check-input:checked {
                background-color: #44ca43;
                border-color: #5bd983;
            }
        /* 調整單選按鈕間距 */
        .opitionString {
            margin-left: 10px;
        }

        /* 將結帳和取消按鈕靠右 */
        .modal-card-foot {
            display: flex;
            justify-content: center; /* 改為 center */
        }

        /* 調整結帳和取消按鈕間距 */
        .modal-card-foot button {
            margin: 0 50px; /* 同時調整左右間距 */
        }

        .custom-button {
            width: 500px;
            height: auto;
            text-align: center;
            
        }
        .btn-table{
            margin-top: 10px;
            margin-bottom: 10px;
            border-radius: 24px;
            width: 500px;
            height: 210px;
            border: 10px solid;
            border-color: #00d1b2;
        }
        .btn-table.on-ready{
            margin-top: 10px;
            margin-bottom: 10px;
            border-radius: 24px;
            width: 500px;
            height: 210px;
            border: 10px solid;
            border-color: #00d1b2;
        }
        .btn-table.on-using{
            margin-top: 10px;
            margin-bottom: 10px;
            border-radius: 24px;
            width: 500px;
            height: 210px;
            border: 10px solid;
            border-color: #d1d100;
        }
        /* .btn-table:hover {
            background-color: #00d1b2;
            border-color: #4dab9d;
            box-shadow: 0 12px 16px 0 rgba(0,0,0,0.24), 0 17px 50px 0 rgba(0,0,0,0.19);
        } */
        .timer  {
            font-size: 260%;
        }
        
       

        
        </style>
</head>

<body >
    <header >
        <nav class="navbar is-primary">
            <div class="column">
                <div class="columns  is-mobile is-2">
                    <div class="column auto ">
                        <p class="title is-1">清一色麻將館</p>
                    </div>
                    <div class="column auto">
                        <p class="title is-2">自動開台系統</p>
                    </div>
                </div>
            </div>          
        </nav>     
    </header>
    <!--桌號按鈕區域容器-->
    <div class="button-container" id="tableButtons">
        @*<button class="button btn-table" id="1" data-table-number="大三元(一)" table-number="1">
            <p class="timer title">大三元(一) </p>
        </button>

        <button class="button btn-table" id="2" data-table-number="大四喜(一)" table-number="2">
            <p class="timer title">大四喜(一)</p>
        </button>

        <button class="button btn-table" id="3" data-table-number="清一色(一)" table-number="3">
            <p class="timer title">清一色(一)</p>
        </button>

        <button class="button btn-table" id="4" data-table-number="湊一色(一)" table-number="4">
            <p class="timer title">湊一色(一)</p>
        </button>

        <button class="button btn-table" id="5" data-table-number="小三元(一)" table-number="5">
            <p class="timer title">小三元(一)</p>
        </button>

        <button class="button btn-table" id="6" data-table-number="碰碰胡(一)" table-number="6">
            <p class="timer title">碰碰胡(一)</p>
        </button>

        <button class="button btn-table" id="7" data-table-number="一摸三(一)" table-number="7">
            <p class="timer title">一摸三(一)</p>
        </button>

        <button class="button btn-table" id="8" data-table-number="槓開花(一)" table-number="8">
            <p class="timer title">槓開花(一)</p>
        </button>

        <button class="button btn-table" id="9" data-table-number="大三元(二)" table-hour-rate="800" table-number="9">
            <p class="timer title">大三元(二)</p>
        </button>

        <button class="button btn-table" id="10" data-table-number="大四喜(二)" table-hour-rate="800" table-number="10">
            <p class="timer title">大四喜(二)</p>
        </button>

        <button class="button btn-table" id="11" data-table-number="清一色(二)" table-hour-rate="800" table-number="11">
            <p class="timer title">清一色(二)</p>
        </button>

        <button class="button btn-table" id="12" data-table-number="湊一色(二)" table-hour-rate="800" table-number="12">
            <p class="timer title">湊一色(二)</p>
        </button>

        <button class="button btn-table" id="13" data-table-number="小三元(二)" table-hour-rate="800" table-number="13">
            <p class="timer title">小三元(二)</p>
        </button>

        <button class="button btn-table" id="14" data-table-number="碰碰胡(二)" table-hour-rate="800" table-number="14">
            <p class="timer title">碰碰胡(二)</p>
        </button>

        <button class="button btn-table" id="15" data-table-number="一摸三(二)" table-hour-rate="800" table-number="15">
            <p class="timer title">一摸三(二)</p>
        </button>

        <button class="button btn-table" id="16" data-table-number="槓開花(二)" table-hour-rate="800" table-number="16">
            <p class="timer title">槓開花(二)</p>
        </button> *@
    </div>

    <footer class="border-top footer text-muted has-background-primary">
        <div id="hidden-enterance" class="container">
            &copy; 2023 - 松洋股份有限公司  業務：02-86471188 專線：0935517378王先生
        </div>
    </footer>

    <!--互動式視窗(外殼)-->
    <div id="modalWrapper" class="modal-wrapper"></div>

    <!-- 購買選項模板 -->
    <template id="modalTemplate">
        <div class="modal is-active">
            <div class="modal-background"></div>
            <div class="modal-card">
                <header class="modal-card-head">
                    <p class="title is-1">開台/加購時數</p>
                    <p class="subtitle is-1">{{tableNumber}}</p>
                </header>
                <section class="modal-card-body">
                    <div class="control">
                        <label class="label-radio">
                            <input type="radio" class="form-check-input" name="purchaseHours" value="1" >
                            <span class="opitionString is-size-2" hourValue="1"></span>
                        </label>
                        <label class="label-radio">
                            <input type="radio" class="form-check-input" name="purchaseHours" value="2">
                            <span class="opitionString is-size-2" hourValue="2"></span>
                        </label>
                        <label class="label-radio">
                            <input type="radio" class="form-check-input" name="purchaseHours" value="3">
                            <span class="opitionString  is-size-2" hourValue="3"></span>
                        </label>
                        <label class="label-radio">
                            <input type="radio" class="form-check-input" name="purchaseHours" value="4">
                            <span class="opitionString is-size-2" hourValue="4"></span>
                        </label>
                        <label class="label-radio">
                            <input type="radio" class="form-check-input" name="purchaseHours" value="5">
                            <span class="opitionString is-size-2" hourValue="5"></span>
                        </label>
                    </div>
                </section>
                <footer class="modal-card-foot">
                    
                    <button class="button is-danger is-outlined cancel-modal-button is-large">取消</button>
                    <button class="button is-success is-large is-check is-C1" id="C1">確認</button>

                </footer>
            </div>
        </div>
    </template>

    <!-- 提示用户投入现金的模板 -->
    <template id="cashReminderTemplate">
        <div class="modal is-active">
            <div class="modal-background"></div>
            <div class="modal-card">
                <header class="modal-card-head">                  
                    <p class="subtitle is-1">{{tableNumber}}</p>
                </header>
                <section class="modal-card-body">
                    <p class="subtitle is-1">請投入現金</p>      
                    <p class="subtitle is-1">應付金額 {{totalAmount}}</p>
                    <p class="subtitle is-1">已付金額 {{currentAmount}}</p>
                </section>
                <footer class="modal-card-foot">
                    <button class="button is-danger is-outlined cancel-modal-button is-large is-C3" id="C3">取消</button>
                    <button class="button is-success is-large is-C2" id="C2" disabled="true">結算</button>
                </footer>
            </div>
        </div>
    </template>

    <!-- 提示用户退款现金的模板 -->
    <template id="refoundReminderTemplate">
        <div class="modal is-active">
            <div class="modal-background"></div>
            <div class="modal-card">
                <header class="modal-card-head">
                    <p class="subtitle is-1">{{tableNumber}}</p>
                </header>
                <section class="modal-card-body">
                    <!-- 提示用户投入现金的内容 -->
                    <p class="subtitle is-1">找零中</p>
                    <p class="subtitle is-1">應退款金額 {{totalAmount}}</p>
                    <p class="subtitle is-1">已退款金額 {{currentAmount}}</p>
                </section>
                <footer class="modal-card-foot">
                </footer>
            </div>
        </div>
    </template>

    <!-- 感謝購買視窗 -->
    <template id="checkOutCompleteTemplate">
        <div class="modal is-active">
            <div class="modal-background"></div>
            <div class="modal-card">
                <header class="modal-card-head">
                    <p class="subtitle is-1">{{messageType1}}</p>
                </header>
                <section class="modal-card-body">
                    <!-- 提示用户投入现金的内容 -->
                    <p class="subtitle is-1">{{messageType2}}</p>
                    <p class="subtitle is-1">{{messageType3}}</p>
                </section>
                <footer class="modal-card-foot">
                    <button class="button is-danger is-outlined cancel-modal-button is-large ">結束</button>
                </footer>
            </div>
        </div>
    </template>  

    

    
</body>
</html>

<script >

    // 数据，每个分类对应的价格
    const categoryPrices = {
        '一般桌': 400,
        '包廂': 800,
        // 添加其他分类和价格
    };



    // 生成按钮的函数
    function createTableButton(id, tableNumber, category) {
        const container = document.getElementById('tableButtons');
        // 创建按钮元素
        const button = document.createElement('button');
        button.classList.add('button', 'btn-table');
        button.setAttribute('id', id);
        button.setAttribute('data-table-number', tableNumber);
        button.setAttribute('table-number', id);
        // 设置按钮内部内容
        const p = document.createElement('p');
        p.classList.add('timer', 'title');
        p.textContent = tableNumber;
        button.appendChild(p);
        // 设置按钮价格
        const hourlyRate = categoryPrices[category] || 400; // 默认价格为400
        if (hourlyRate !== 400) {
            button.setAttribute('table-hour-rate', hourlyRate);
        }
        // 将按钮添加到容器中
        container.appendChild(button);
    }
   
    //创建按钮
    //creatTableButton('桌號','桌號名稱','收費方式'):
    createTableButton('1', '大三元(一)', '一般桌');
    createTableButton('2', '大四喜(一)', '一般桌');
    createTableButton('3', '清一色(一)', '一般桌');
    createTableButton('4', '湊一色(一)', '一般桌');
    createTableButton('5', '小三元(一)', '一般桌');
    createTableButton('6', '碰碰胡(一)', '一般桌');
    createTableButton('7', '一摸三(一)', '一般桌');
    createTableButton('8', '槓開花(一)', '一般桌');
    createTableButton('9', '大三元(二)', '包廂');
    createTableButton('10', '大四喜(二)', '包廂');
    createTableButton('11', '清一色(二)', '包廂');
    createTableButton('12', '湊一色(二)', '包廂');
    createTableButton('13', '小三元(二)', '包廂');
    createTableButton('14', '碰碰胡(二)', '包廂');
    createTableButton('15', '一摸三(二)', '包廂');
    createTableButton('16', '槓開花(二)', '包廂');

    document.addEventListener('DOMContentLoaded', function () {
        const modalWrapper = document.getElementById('modalWrapper');
        const buttons = document.querySelectorAll('.button[data-table-number]');

        //console.log(buttons);
        const modalTemplate = document.getElementById('modalTemplate');
        let tableNumber;
        let tableName;
        let hourlyRate;
        let data;
        let totalAmount;

        connection.on("PaperVerifying", verify => {
            console.log("PaperVerifying" + verify);
            if (verify == true) {
                document.getElementById("C2").disabled = true;
                document.getElementById("C3").disabled = true;
            }else{
                document.getElementById("C2").disabled = false;
                document.getElementById("C3").disabled = false;
            }
        });

        connection.on("RecviedCash", amount => { //
            currentRecived += amount;
            console.log("Cash Recived:" + currentRecived);
            const cashReminderTemplate = document.getElementById('cashReminderTemplate');
            const modalContent = cashReminderTemplate.innerHTML
                .replace('{{totalAmount}}', totalAmount)
                .replace('{{tableNumber}}', tableName)
                .replace('{{currentAmount}}', currentRecived);
            modalWrapper.innerHTML = modalContent;
            modalWrapper.classList.add('is-active');
            if (currentRecived >= totalAmount) {
                document.getElementById("C2").disabled = false;
            }
        });

        buttons.forEach(function (button) {
            button.addEventListener('click', function () {
                
                waitForCheckoutCompletion = false;
                tableNumber = button.getAttribute('table-number');
                tableName = button.getAttribute('data-table-number');
                hourlyRate = button.getAttribute('table-hour-rate');
                
                //預設費率為400元每小時
                if (hourlyRate == null) {
                    hourlyRate = 400;
                }

                const modalContent = modalTemplate.innerHTML
                    .replace('{{tableNumber}}', tableName);
                
                modalWrapper.innerHTML = modalContent;
                modalWrapper.classList.add('is-active');
                const labels = document.querySelectorAll('.opitionString[hourValue]');
                labels.forEach((label) => {
                    console.log('trying to get label');
                    const labelNumber = label.getAttribute('hourValue');
                    const opitionString = ` ${labelNumber}小時/${hourlyRate * labelNumber}元`;
                    label.innerHTML.replace('{{opitionString}}', opitionString);
                    label.innerText = opitionString;

                });
                console.log(tableNumber);
            });
        });

        modalWrapper.addEventListener('click', function (event) {
            if (event.target === modalWrapper) {
                console.log("(event.target");
                closeModal();
            }
        });

        document.addEventListener('click', function (event) {
            if (event.target.classList.contains('cancel-modal-button')) {
                console.log("cancel-modal-button");
                closeModal();
            }
        });

        // 在判斷式外部创建标志变量，用于等待結帳完成消息
        var waitForCheckoutCompletion = false; // 使用 let 来声明变量
        var currentRecived;

        connection.on("CheckoutCompleted", (message) => {
            // 在此處顯示彈出視窗或其他通知方式，通知使用者結帳已完成
            console.log("結帳通知: " + message);
            // 设置标志变量为 true
            waitForCheckoutCompletion = true;
        });
       

        document.addEventListener('click', async function (event) {
            //console.log(tableNumber + " " + selectedHourValue);
            if (event.target.classList.contains('is-C1')) {
                console.log("c1 on clicked");
                const selectedHourInput = document.querySelector('input[name="purchaseHours"]:checked');
                if (selectedHourInput) {
                    
                    const selectedHourValue = parseFloat(selectedHourInput.value);
                    
                    

                    totalAmount = selectedHourValue * hourlyRate;
                   
                    console.log("選擇桌號:" + tableNumber + ",選擇時數" + selectedHourValue + ",費率:" + hourlyRate +",費用:"+totalAmount);
                    Checkout_1();   //開啟投幣&收鈔
                    waitForCheckoutCompletion = false;
                    console.log("C1");
                    closeModal();
                    openCashReminder(tableNumber, totalAmount);//開啟 提示投入金錢視窗

                    //等待結帳完成消息
                    while (!waitForCheckoutCompletion) {
                        //waitForCheckoutCompletion = true;// <---------------這行之後要註解掉 他決定了網頁是否要等待錢箱結帳完成
                        await new Promise(resolve => setTimeout(resolve, 100)); // 等待100毫秒后再次检查标志变量
                    }

                    if ( cancel == true) {
                       
                    }else{
                        //在接收到"結帳完成"通知后再开启继电器
                        StartTable(tableNumber, selectedHourValue);
                        //傳送訂單訊息至資料庫 以及列印收據
                        CompleteOrder(tableNumber,tableName, selectedHourValue, hourlyRate, totalAmount);
                    }

                } else {
                    console.log("請選擇時數後再結帳。");

                }
            }

        });
        var cancel = new Boolean(false);

        // 打开现金机提示
        function openCashReminder(tableNumber, totalAmount) {

            console.log("CashReminder on generated");
            const cashReminderTemplate = document.getElementById('cashReminderTemplate');
            const modalContent = cashReminderTemplate.innerHTML
                .replace('{{totalAmount}}', totalAmount)
                .replace('{{tableNumber}}', tableName)
                .replace('{{currentAmount}}', 0);   //投錢狀態必定為零
            modalWrapper.innerHTML = modalContent;
            modalWrapper.classList.add('is-active');
            currentRecived = 0;
            
            // document.getElementById("C2").onclick = fuction{
            //     console.log("c2 on clicked");//
            //     Checkout_2(totalAmount);
            //     cancel = false;
            //     refoundAmount = currentRecived - totalAmount;
            //     console.log("openCashReminder");
            //     closeModal();
            //     openRefoundReminder(refoundAmount, tableNumber);
            // }
            // document.getElementById("C3").onclick = fuction{
            //     console.log("c3 on clicked");
            //     Checkout_2(0);
            //     cancel = true;
            //     refoundAmount = currentRecived - totalAmount;
            //     console.log("openCashReminder");
            //     closeModal();
            //     openRefoundReminder(refoundAmount, tableNumber);
            // }

        }
        document.addEventListener('click', function (event) {

            if (event.target.classList.contains('is-C2')) { 
                messageType = 2;
                cancel = false;
                console.log("c2 on clicked");//

                Checkout_2(totalAmount);
                refoundAmount = currentRecived - totalAmount;
                closeModal();
                openRefoundReminder(refoundAmount, tableNumber);
            }
            else if (event.target.classList.contains('is-C3')) {   
                totalAmount = 0;    //取消結帳 設定帳單為0元 全額退款
                cancel = true;
                messageType = 3;
                console.log("c3 on clicked");

                Checkout_2(totalAmount);
                refoundAmount = currentRecived - totalAmount;
                closeModal();
                openRefoundReminder(refoundAmount, tableNumber);
            }

        });

        let refoundAmount;
        var currentRefound;
        connection.on("PayoutCash", amount => {
            currentRefound += amount;
            console.log("Cash Refund:" + currentRefound); 
            const modalContent = refoundReminderTemplate.innerHTML
                .replace('{{tableNumber}}', tableName)
                .replace('{{totalAmount}}', refoundAmount)
                .replace('{{currentAmount}}', currentRefound);
            modalWrapper.innerHTML = modalContent;
            modalWrapper.classList.add('is-active');

        });
        function openRefoundReminder(totalAmount,tableNumber) {
            currentRefound = 0;
            refoundAmount = totalAmount;
            const refoundReminderTemplate = document.getElementById('refoundReminderTemplate');
            const modalContent = refoundReminderTemplate.innerHTML
                .replace('{{totalAmount}}', refoundAmount)
                .replace('{{tableNumber}}', tableName)
                .replace('{{currentAmount}}', currentRefound);  
            modalWrapper.innerHTML = modalContent;
            modalWrapper.classList.add('is-active');
            
                
            const closeModalButton = modalWrapper.querySelector('.close-modal-button');
           
            waitForCheckout(); // 调用等待函数
        }
        let messageType = 0;
        function openCheckoutComplete() {
            let messageType1, messageType2, messageType3;
            switch (messageType) { 

                case 2:
                    console.log('messageType: '+messageType);
                    messageType1 = '' + tableName;
                    messageType2 = '感謝您的購買';
                    messageType3 = '已成功開台/加購';
                    //增加開台加購判別式
                    break;

                case 3:
                    console.log('messageType: ' + messageType);
                    messageType1 = '' + tableName;
                    messageType2 = '退款完成';
                    messageType3 = '已取消訂單';
                    break;
            }
            console.log(messageType);
            const checkOutCompleteTemplate = document.getElementById('checkOutCompleteTemplate');
            const modalContent = checkOutCompleteTemplate.innerHTML
                .replace('{{messageType1}}', messageType1)
                .replace('{{messageType2}}', messageType2)
                .replace('{{messageType3}}', messageType3);



            modalWrapper.innerHTML = modalContent;
            modalWrapper.classList.add('is-active');
            updateRemainingTime(tableNumber,tableName);
        }
        // 在这里添加逻辑，等待waitForCheckoutCompletion为true，即收到“結帳完成”消息
        const waitForCheckout = async () => {
            while (!waitForCheckoutCompletion) {
                await new Promise(resolve => setTimeout(resolve, 100)); // 等待100毫秒后再次检查标志变量
            }
            console.log("waitForCheckout");
            closeModal(); // 关闭第二个视窗
            openCheckoutComplete();
        };
        
        function closeModal() {
            modalWrapper.classList.remove('is-active');
            modalWrapper.innerHTML = '';
            console.log("關閉互動視窗");
            updateAllRemainingTimesOnLoad();
        }
        // 可以在這裡添加其他的事件處理邏輯
    });

    const timers = {};   
    var hiddenbutton = document.getElementById('hidden-enterance');
    let clicks = 0;
    hiddenbutton.addEventListener('click', function () {
        console.log("hidden button onclicked");
        clicks++;
        if (clicks === 3) {
            // 当按钮被连续点击三次时，执行进入后台操作
            enterAdminPanel();
            clicks = 0; // 重置点击计数
        }
    });
   
    // 函数用于获取并更新指定桌号的剩余时间
    async function updateRemainingTime(tableNumber,tableName) {
        try {
            const url = `/api/Table/GetRemainingTime?tableNumber=${tableNumber}`;
            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            if (response.ok) {
                const result = await response.json();
                const remainingTimeInSeconds = Math.round(result.remainingTime/1000); // 四舍五入到秒
                console.log("remaining seconds:" + remainingTimeInSeconds);

                //若無剩餘時間則不更新計時器
                if (remainingTimeInSeconds > 1) {
                    // 如果尚未创建计时器，则创建一个
                    if (!timers[tableNumber]) {
                        timers[tableNumber] = startCountdown(tableNumber,tableName, remainingTimeInSeconds);
                    } else {
                        // 更新现有计时器的剩余时间
                        timers[tableNumber].remainingTime = remainingTimeInSeconds;
                    }

                    // 将剩余时间更新到相应的按钮上
                    const timerElement = document.querySelector(`[table-number="${tableNumber}"] .timer`);
                    timerElement.innerHTML = formatRemainingTime(remainingTimeInSeconds, tableNumber,tableName);
                }
            } else {
                console.log("API 请求失败");
            }
        } catch (error) {
            console.error("请求API时发生错误：" + error);
        }
    }

    function startCountdown(tableNumber,tableName, remainingTimeInSeconds) {
        // 创建一个计时器对象
        const timer = {
            remainingTime: remainingTimeInSeconds,
            intervalId: setInterval(() => {
                // 更新计时器显示
                const timerElement = document.querySelector(`[table-number="${tableNumber}"] .timer`);
                timerElement.innerHTML = formatRemainingTime(timer.remainingTime,tableNumber,tableName);
                // 倒计时结束时清除计时器
                if (timer.remainingTime <= 0) {
                    clearInterval(timer.intervalId);
                    delete timers[tableNumber];
                } else {
                    timer.remainingTime--;
                }
            }, 1000)
        };
        return timer;
    }

    // 格式化剩余时间为可读格式（例如，hh:mm:ss）
    function formatRemainingTime(remainingTimeInSeconds, tableNumber,tableName) { 
        let formatedtext = tableName;
        if (remainingTimeInSeconds > 0) {           
            document.querySelector(`[table-number="${tableNumber}"]`).classList.add("on-using");
            formatedtext = ` ${tableName} (使用中)`;
            formatedtext = formatedtext.concat(`<br \> 剩餘時間: `);
            const hours = Math.floor(remainingTimeInSeconds / 3600);
            if (hours > 0) {
                formatedtext = formatedtext.concat(`${hours}時 `);
            }
            const minutes = Math.floor((remainingTimeInSeconds % 3600) / 60);
            if (minutes > 0) {
                formatedtext = formatedtext.concat(`${minutes}分 `);
            }
            const seconds = remainingTimeInSeconds % 60;
            if (seconds) {
                formatedtext = formatedtext.concat(`${seconds}秒`);
            }
        }else {
            document.querySelector(`[table-number="${tableNumber}"]`).classList.remove("on-using");
        }
        
        return formatedtext;
    }
    
        
       
    

    // 在首页加载时，更新所有桌号的剩余时间
    function updateAllRemainingTimesOnLoad() {
        const tableButtons = document.querySelectorAll('[table-number]');
        tableButtons.forEach((button) => {
            const tableNumber = button.getAttribute('table-number');
            const tableName = button.getAttribute('data-table-number');
            updateRemainingTime(tableNumber,tableName);
        });
        console.log('查詢剩餘時間');
    }

    // 在开台和加购后，更新指定桌号的剩余时间
    

    // 在首页加载时，更新所有桌号的剩余时间
    updateAllRemainingTimesOnLoad();

    

    


    // 进入后台操作
    function enterAdminPanel() {
        var baseUrl = window.location.origin; // 获取当前页面的域名部分
        var adminPanelUrl = baseUrl + '/home/adminpanel'; // 构建完整的跳转 URL
        window.location.href = adminPanelUrl;
        console.log("進入後台");
    }

    

    

    async function CompleteOrder(tableNumber,tableName, selectedHourValue, hourlyRate, totalAmount) {
        try {
            const response = await fetch(`/api/Order/Checkout?tableNumber=${tableNumber}&tableName=${tableName}&hours=${selectedHourValue}&hourlyRate=${hourlyRate}&totalAmount=${totalAmount}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                //body: JSON.stringify({ tableNumber }) // 傳送桌號給後端
            });

            if (response.ok) {
                const apiResponse = await response.json();
                //if (apiResponse.ok) {   // <------這是啥
                console.log("寫入資料庫");
                // 在這裡執行開啟繼電器等操作
                //} else {
                //    console.log("等待中...");
                // 如果結帳未完成，可以選擇繼續等待或執行其他操作
                //}
                updateRemainingTime(tableNumber, tableName);
            } else {
                console.log("API 回傳結果：等待結帳完成失敗");
            }
        } catch (error) {
            console.error("呼叫API時發生錯誤：" + error);
        }
    }
    async function StartTable(tableNumber, selectedHourValue) {
        console.log(tableNumber + "" + selectedHourValue);
        try {
            const url = `/api/Table/CheckOutTable?tableNumber=${tableNumber}&hours=${selectedHourValue}`;
            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            if (response.ok) {
                const apiResponse = await response.json();
                console.log("API TableController:CheckOutTable 回傳結果：" + apiResponse.message);
            } else {
                console.log("API TableController:CheckOutTable 回傳結果：結帳失敗");
            }
        } catch (error) {
            console.error("呼叫API TableController:CheckOutTable 時發生錯誤：" + error);
        }
    }



    function StartPay(shortCommand, value, amount) {
        fetch('/GenerateFullCommand', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                shortCommand: shortCommand,
                value: value,
                amount: amount
            })
        })
            .then(response => response.json())
            .then(data => {

                console.log("傳送的完整指令：" + data.fullCommand);

                return data.fullCommand;
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }

    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/NotificationHub") // SignalR Hub的路由
        .build();

    connection.start().then(() => {
        console.log("SignalR連接成功");
    }).catch((error) => {
        console.error("SignalR連接錯誤: " + error);
    });

    async function Checkout_1() {
        console.log("C1 is called");
        fetch('/Checkout_1', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        }).then(response => response.json());
    }
    async function Checkout_2(checkoutAmount) {
        console.log("C2 is called");
        fetch(`/Checkout_2?CheckoutAmount=${checkoutAmount}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        }).then(response => response.json());
    }
    async function Checkout_3() {
        fetch('/Checkout_3', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        }).then(response => response.json());
    }
    async function XC100StockUpdate(amount) {
        fetch(`/XC100StockUpdate?Amount=${amount}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        }).then(response => response.json());
    }
    async function XC100StockScan() {
        const url = `/XC100StockScan`;
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        });
        if (response.ok) {
            const result = await response.json();
            console.log("剩餘紙鈔數量", result);
        }
    }
         
    // async function Recipt() {
    //     fetch('/recipt', {
    //         method: 'POST',
    //         headers: {
    //             'Content-Type': 'application/json'
    //         }
    //     }).then(response => response.json());
    // }


    

</script>
